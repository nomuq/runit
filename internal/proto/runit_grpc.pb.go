// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunitClient is the client API for Runit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunitClient interface {
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (Runit_DeployClient, error)
}

type runitClient struct {
	cc grpc.ClientConnInterface
}

func NewRunitClient(cc grpc.ClientConnInterface) RunitClient {
	return &runitClient{cc}
}

func (c *runitClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (Runit_DeployClient, error) {
	stream, err := c.cc.NewStream(ctx, &Runit_ServiceDesc.Streams[0], "/proto.Runit/Deploy", opts...)
	if err != nil {
		return nil, err
	}
	x := &runitDeployClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runit_DeployClient interface {
	Recv() (*DeployResponse, error)
	grpc.ClientStream
}

type runitDeployClient struct {
	grpc.ClientStream
}

func (x *runitDeployClient) Recv() (*DeployResponse, error) {
	m := new(DeployResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RunitServer is the server API for Runit service.
// All implementations must embed UnimplementedRunitServer
// for forward compatibility
type RunitServer interface {
	Deploy(*DeployRequest, Runit_DeployServer) error
	mustEmbedUnimplementedRunitServer()
}

// UnimplementedRunitServer must be embedded to have forward compatible implementations.
type UnimplementedRunitServer struct {
}

func (UnimplementedRunitServer) Deploy(*DeployRequest, Runit_DeployServer) error {
	return status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedRunitServer) mustEmbedUnimplementedRunitServer() {}

// UnsafeRunitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunitServer will
// result in compilation errors.
type UnsafeRunitServer interface {
	mustEmbedUnimplementedRunitServer()
}

func RegisterRunitServer(s grpc.ServiceRegistrar, srv RunitServer) {
	s.RegisterService(&Runit_ServiceDesc, srv)
}

func _Runit_Deploy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunitServer).Deploy(m, &runitDeployServer{stream})
}

type Runit_DeployServer interface {
	Send(*DeployResponse) error
	grpc.ServerStream
}

type runitDeployServer struct {
	grpc.ServerStream
}

func (x *runitDeployServer) Send(m *DeployResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Runit_ServiceDesc is the grpc.ServiceDesc for Runit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Runit",
	HandlerType: (*RunitServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Deploy",
			Handler:       _Runit_Deploy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "runit.proto",
}
